{"version":3,"sources":["utils/auth.js","contexts/AuthContext.js","components/PrivateRoute/PrivateRoute.js","components/Layout/Layout.js","components/Button/Button.js","pages/home/Home.js","components/Input/Input.js","components/AlertDisplay/AlertDisplay.js","utils/api.js","pages/registration/helpers.js","pages/registration/Registration.js","pages/request-schedule/helpers.js","pages/request-schedule/RequestSchedule.js","pages/enter-token/EnterToken.js","pages/upload-resume/helpers.js","pages/upload-resume/UploadResume.js","App.js","serviceWorker.js","index.js"],"names":["isBrowser","window","getToken","localStorage","axaToken","JSON","parse","setToken","token","stringify","AuthContext","createContext","AuthProvider","children","useState","loading","auth","setAuth","useEffect","console","log","Provider","value","setAuthToken","prevState","setClearToken","PrivateRoute","rest","useContext","render","location","to","pathname","state","from","Layout","className","name","path","map","item","key","exact","activeClassName","Button","text","type","color","props","defaultProps","Home","Input","label","placeholder","onChange","htmlFor","id","AlertDisplay","message","status","client","endpoint","a","body","customConfig","external","headers","config","method","fetch","process","then","response","json","data","ok","Promise","reject","register","defaultValue","Registration","history","useHistory","email","mobile","positionApplied","source","regField","setRegField","setStatus","setLoading","handleUpdateField","selected","e","preventDefault","Name","Email","Mobile","PositionApplied","Source","setTimeout","push","Result","onSubmit","required","target","disabled","schedule","RequestSchedule","Date","date","setDate","moment","hour","minute","time","setTime","handleSubmit","ProposedDate","format","ProposedTime","Online","Message","showSecond","use12Hours","inputReadOnly","dateFormat","customInput","EnterToken","setValue","onClick","UploadResume","file","setFile","mime","error","files","fileReader","FileReader","onloadend","result","split","pop","readAsDataURL","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d18ea30d.chunk.js","sourcesContent":["const isBrowser = typeof window !== `undefined`;\n\nexport const getToken = () =>\n  window.localStorage.axaToken && JSON.parse(window.localStorage.axaToken);\n\nexport const setToken = (token) =>\n  (window.localStorage.axaToken = JSON.stringify(token));\n\nexport const isLoggedIn = () => {\n  if (!isBrowser) return false;\n\n  const token = getToken();\n\n  return !!token;\n};\n\nexport const clearToken = () => {\n  if (!isBrowser) return;\n\n  console.log(`Ensuring the \\`Token\\` property exists.`);\n  setToken('');\n  //   callback();\n};\n","import React, { useEffect, createContext, useState } from 'react';\nimport { clearToken, getToken, setToken } from 'utils/auth';\n\nexport const AuthContext = createContext({});\n\nconst AuthProvider = ({ children }) => {\n  const [auth, setAuth] = useState({ loading: true, token: getToken() });\n  // we will use loading later\n\n  useEffect(() => {\n    const token = getToken();\n\n    console.log(token, 'AuthProvider');\n\n    if (token) {\n      setAuth({\n        loading: false,\n        token,\n      });\n    }\n  }, []);\n\n  const setAuthToken = (value) => {\n    console.log(value, 'CONTASDASD!!');\n    setToken(value);\n    setAuth((prevState) => ({\n      ...prevState,\n      token: value,\n    }));\n  };\n\n  const setClearToken = () => {\n    clearToken();\n    setAuth((prevState) => ({\n      ...prevState,\n      token: '',\n    }));\n  };\n\n  // a function that will help us to add the user data in the auth\n\n  return (\n    <AuthContext.Provider value={{ auth, setAuthToken, setClearToken }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { AuthContext } from 'contexts/AuthContext';\n\nconst PrivateRoute = ({ children, ...rest }) => {\n  const { auth } = useContext(AuthContext);\n  console.log(auth, 'PrivateRoute');\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        auth.token ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/',\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nPrivateRoute.propTypes = {};\n\nexport default PrivateRoute;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './Layout.styles.css';\n\nconst Layout = ({ children }) => {\n  const navLinks = [\n    {\n      name: 'Home',\n      path: '/',\n    },\n    {\n      name: 'Registration',\n      path: '/registration',\n    },\n    {\n      name: 'Enter Token',\n      path: '/enter-token',\n    },\n    {\n      name: 'Upload Resume',\n      path: '/upload-resume',\n    },\n    {\n      name: 'Request Schedule',\n      path: '/request-schedule',\n    },\n  ];\n\n  return (\n    <div className=\"layout\">\n      <header className=\"header\">\n        <ul className=\"nav\">\n          {navLinks.map((item) => (\n            <li key={item.name} className=\"nav-item\">\n              <NavLink exact activeClassName=\"selected\" to={item.path}>\n                {item.name}\n              </NavLink>\n            </li>\n          ))}\n        </ul>\n      </header>\n      {children}\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.styles.css';\n\nconst Button = ({ text, type, color, ...props }) => {\n  return (\n    <button className={`button ${color ? color : ''}`} type={type} {...props}>\n      {text}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  color: PropTypes.string,\n};\n\nButton.defaultProps = {\n  type: 'button',\n  color: '',\n};\n\nexport default Button;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Layout from 'components/Layout';\nimport Button from 'components/Button';\n\nimport './Home.styles.css';\n\nconst Home = () => {\n  return (\n    <Layout>\n      <h1>Good Morning, Developer!</h1>\n      <Link to=\"/registration\">\n        <Button text=\"Ready? Let's get started!\" />\n      </Link>\n    </Layout>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Input.styles.css';\n\nconst Input = ({ type, name, label, placeholder, onChange, ...props }) => {\n  return (\n    <div className=\"field-wrap\">\n      {label && (\n        <label className=\"field-label\" htmlFor={name}>\n          {label}\n        </label>\n      )}\n      <input\n        {...props}\n        className=\"field-input\"\n        type={type}\n        name={name}\n        id={name}\n        placeholder={placeholder}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string,\n\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n};\n\nInput.defaultProps = {\n  type: 'text',\n  placeholder: '',\n  label: '',\n  onChange: () => {},\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './AlertDisplay.styles.css';\n\nconst AlertDisplay = ({ message, status, ...props }) => {\n  return (\n    <div className={`alert-display ${status}`} {...props}>\n      <h3>{status}</h3>\n      <p>{message}</p>\n    </div>\n  );\n};\n\nAlertDisplay.propTypes = {\n  message: PropTypes.string.isRequired,\n  status: PropTypes.string,\n};\n\nAlertDisplay.defaultProps = {\n  status: '',\n};\n\nexport default AlertDisplay;\n","import { getToken } from './auth';\n\nexport async function client(\n  endpoint,\n  { body, ...customConfig } = {},\n  external\n) {\n  const token = external ? '' : getToken();\n  const headers = { 'Content-Type': 'application/json' };\n  if (token) {\n    headers['x-axa-api-key'] = `${token}`;\n  }\n  const config = {\n    method: body ? body.method : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  };\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n\n  return window.fetch(`${process.env.REACT_APP_API_URL}${endpoint}`, config).then(async (response) => {\n    const data = await response.json();\n\n    if (response.ok) {\n      return data;\n    } else {\n      return Promise.reject(data);\n    }\n  });\n}\n","import { client } from 'utils/api';\n\nexport function register(value) {\n  return client(\n    'register',\n    {\n      method: 'POST',\n      body: value,\n    },\n    true\n  );\n}\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Layout from 'components/Layout';\nimport Button from 'components/Button';\nimport Input from 'components/Input';\nimport AlertDisplay from 'components/AlertDisplay';\n\nimport { register } from './helpers';\n\nimport './Registration.styles.css';\n\nconst defaultValue = {\n  type: '',\n  message: '',\n};\n\nconst Registration = () => {\n  const history = useHistory();\n\n  const [regField, setRegField] = useState({\n    name: '',\n    email: '',\n    mobile: '',\n    positionApplied: '',\n    source: '',\n  });\n  const [status, setStatus] = useState(defaultValue);\n  const [loading, setLoading] = useState(false);\n\n  function handleUpdateField(value, selected) {\n    setStatus(defaultValue);\n    setRegField((prevState) => ({\n      ...prevState,\n      [selected]: value,\n    }));\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    const value = {\n      Name: regField.mobile,\n      Email: regField.email,\n      Mobile: regField.mobile,\n      PositionApplied: regField.positionApplied,\n      Source: regField.source,\n    };\n    setLoading(true);\n    try {\n      await register(value);\n      setStatus({\n        type: 'success',\n        message: 'Your information has been successfully submitted.',\n      });\n\n      setTimeout(() => {\n        history.push('/enter-token');\n      }, 1500);\n    } catch (error) {\n      if (error.Result >= 400) {\n        setStatus({\n          type: 'error',\n          message: 'Oops, Please check the fields and re-submit, Thank you!',\n        });\n      }\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Layout>\n      <div className=\"home-page\">\n        <h1>Registration</h1>\n        {status.type && (\n          <AlertDisplay message={status.message} status={status.type} />\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <Input\n            required\n            name=\"name\"\n            label=\"Name\"\n            value={regField.name}\n            onChange={(e) => handleUpdateField(e.target.value, 'name')}\n          />\n          <Input\n            required\n            type=\"email\"\n            name=\"Email\"\n            label=\"email\"\n            value={regField.email}\n            onChange={(e) => handleUpdateField(e.target.value, 'email')}\n          />\n          <Input\n            required\n            type=\"tel\"\n            name=\"mobile\"\n            label=\"Mobile\"\n            value={regField.mobile}\n            onChange={(e) => handleUpdateField(e.target.value, 'mobile')}\n          />\n          <Input\n            required\n            name=\"positionApplied\"\n            label=\"Position Applied\"\n            value={regField.positionApplied}\n            onChange={(e) =>\n              handleUpdateField(e.target.value, 'positionApplied')\n            }\n          />\n          <Input\n            required\n            name=\"source\"\n            label=\"Source\"\n            value={regField.source}\n            onChange={(e) => handleUpdateField(e.target.value, 'source')}\n          />\n          <Button text=\"Submit\" type=\"submit\" disabled={loading} />\n        </form>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Registration;\n","import { client } from 'utils/api';\n\nexport function schedule(value) {\n  return client('schedule', {\n    method: 'POST',\n    body: value,\n  });\n}\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport DatePicker from 'react-datepicker';\nimport TimePicker from 'rc-time-picker';\nimport moment from 'moment';\n\nimport Layout from 'components/Layout';\nimport Button from 'components/Button';\nimport Input from 'components/Input';\nimport AlertDisplay from 'components/AlertDisplay';\n\nimport { schedule } from './helpers';\n\nimport './RequestSchedule.styles.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'rc-time-picker/assets/index.css';\n\nconst defaultValue = {\n  type: '',\n  message: '',\n};\n\nconst RequestSchedule = () => {\n  const timeFormat = 'h:mm A';\n  const dateFormat = 'yyyy-MM-dd';\n\n  const history = useHistory();\n\n  const [status, setStatus] = useState(defaultValue);\n  const [loading, setLoading] = useState(false);\n  const [date, setDate] = useState(new Date());\n  const [time, setTime] = useState(moment().hour(0).minute(0));\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const value = {\n      ProposedDate: moment(date).format('YYYY-MM-DD'),\n      ProposedTime: time,\n      Online: 'true',\n    };\n\n    setLoading(true);\n    try {\n      await schedule(value);\n\n      setStatus({\n        type: 'success',\n        message: 'Your Schedule has been successfully submitted.',\n      });\n    } catch (err) {\n      setStatus({\n        type: 'error',\n        message:\n          err.Message || 'Oops, Please try to select new schedule, Thank you!',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"schedule-page\">\n        <h1>Please select your schedule</h1>\n        {status.type && (\n          <AlertDisplay message={status.message} status={status.type} />\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <label className=\"field-label\">Proposed Time</label>\n          <TimePicker\n            showSecond={false}\n            defaultValue={time}\n            className=\"field-wrap\"\n            onChange={(value) => {\n              setTime(value.format(timeFormat));\n              setStatus(defaultValue);\n            }}\n            format={timeFormat}\n            use12Hours\n            inputReadOnly\n          />\n          <DatePicker\n            selected={date}\n            onChange={(date) => {\n              setDate(date);\n              setStatus(defaultValue);\n            }}\n            dateFormat={dateFormat}\n            customInput={<Input label=\"Proposed Date\" />}\n          />\n          <Button text=\"Submit\" type=\"submit\" disabled={loading} />\n        </form>\n      </div>\n    </Layout>\n  );\n};\n\nexport default RequestSchedule;\n","import React, { useState, useEffect, useContext } from 'react';\n\nimport Layout from 'components/Layout';\nimport Button from 'components/Button';\nimport Input from 'components/Input';\n\nimport { AuthContext } from 'contexts/AuthContext';\n\nimport './EnterToken.styles.css';\n\nconst EnterToken = () => {\n  const { auth, setAuthToken, setClearToken } = useContext(AuthContext);\n  const [value, setValue] = useState('');\n\n  useEffect(() => {\n    console.log(auth.token, 'TOKE!!@!@');\n\n    if (auth.token) {\n      setValue(auth.token);\n    }\n  }, [auth.token]);\n\n  function handleUpdate(e) {\n    e.preventDefault();\n\n    setAuthToken(value);\n  }\n\n  function handleClearToken() {\n    setValue('');\n    setClearToken();\n  }\n\n  return (\n    <Layout>\n    \n      <div className=\"enter-token-page\">\n      <h1>Enter your token</h1>\n        <form onSubmit={handleUpdate}>\n          <Input\n            required\n            name=\"token\"\n            label=\"Token\"\n            value={value}\n            onChange={(e) => setValue(e.target.value)}\n          />\n\n          <Button text=\"Save Token\" type=\"submit\" />\n          <Button text=\"Clear Token\" color=\"light\" onClick={handleClearToken} />\n        </form>\n      </div>\n    </Layout>\n  );\n};\n\nexport default EnterToken;\n","import { client } from 'utils/api';\n\nexport function register(value) {\n  return client('upload', {\n    method: 'POST',\n    body: value,\n  });\n}\n","import React, { useState} from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Layout from 'components/Layout';\nimport Button from 'components/Button';\nimport Input from 'components/Input';\nimport AlertDisplay from 'components/AlertDisplay';\n\nimport { register } from './helpers';\n\nimport './UploadResume.styles.css';\n\nconst defaultValue = {\n  type: '',\n  message: '',\n};\n\nconst UploadResume = () => {\n  const history = useHistory();\n\n  const [file, setFile] = useState('');\n  const [status, setStatus] = useState(defaultValue);\n  const [loading, setLoading] = useState(false);\n\n  const handleConvert = (e) => {\n    const value = e.target.files[0];\n    const fileReader = new FileReader();\n    setStatus(defaultValue);\n\n    fileReader.onloadend = () => {\n      setFile(fileReader.result.split(',').pop());\n    };\n\n    // Convert data to base64\n    if (value) {\n      fileReader.readAsDataURL(value);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    const value = {\n      file: {\n        mime: 'application/pdf',\n        data: file,\n      },\n    };\n\n    try {\n      await register(value);\n\n      setStatus({\n        type: 'success',\n        message: 'Your Resume has been successfully uploaded.',\n      });\n\n      setTimeout(() => {\n        history.push('/request-schedule')\n      }, 1500);\n    } catch (error) {\n      console.log({ error }, 'ERROR !!!!');\n      setStatus({\n        type: 'error',\n        message: 'Oops, Please check your resume and re-upload, Thank you!',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"upload-page\">\n        <h1>Please upload your resume</h1>\n        {status.type && (\n          <AlertDisplay message={status.message} status={status.type} />\n        )}\n\n        <form onSubmit={handleSubmit}>\n          <Input\n            required\n            type=\"file\"\n            name=\"file-resume\"\n            label=\"File upload\"\n            onChange={handleConvert}\n          />\n\n          <Button text=\"Upload File\" type=\"submit\" disabled={loading} />\n        </form>\n      </div>\n    </Layout>\n  );\n};\n\nexport default UploadResume;\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport PrivateRoute from 'components/PrivateRoute';\n\nimport Home from 'pages/home';\nimport Registration from 'pages/registration';\nimport RequestSchedule from 'pages/request-schedule';\nimport EnterToken from 'pages/enter-token';\nimport UploadResume from 'pages/upload-resume';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n     \n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/registration\">\n          <Registration />\n        </Route>\n\n        <Route path=\"/enter-token\">\n          <EnterToken />\n        </Route>\n        <PrivateRoute path=\"/request-schedule\">\n          <RequestSchedule />\n        </PrivateRoute>\n\n        <PrivateRoute path=\"/upload-resume\">\n          <UploadResume />\n        </PrivateRoute>\n        <Route>\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AuthProvider from 'contexts/AuthContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}